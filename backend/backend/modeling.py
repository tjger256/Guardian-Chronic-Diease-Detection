# -*- coding: utf-8 -*-
"""Hackathon ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3TeaHU9xdsyw6DgCZ2d-zfqFBL5kB8A

## Importing Model
"""

# importing models
import pandas as pd
import pickle

#test
# scaler = StandardScaler()
# log_reg = LogisticRegression(solver='liblinear')
# Getting the data
# def init():
#     url = "https://gitlab.com/codeshells/modeling/-/raw/main/Heart_Disease.csv"
#     df = pd.read_csv(url)

#     df.head()

#     # Drop nan and duplicate
#     df = df.dropna()
#     df = df.drop_duplicates()
#     df.info()

#     # use laberencoder to exam the data connections
    
#     df_encoded = df.copy()
#     label_encoder = LabelEncoder()
#     for column in df_encoded.columns:
#         if df_encoded[column].dtype == 'object':
#             df_encoded[column] = label_encoder.fit_transform(df_encoded[column])

#     df_encoded.head()

#     #Examinate the coefficients

#     """We Will take all the categorical variable that has the coefficients larger than 0.05% or less than 0.05% which include: <br>
#     PhysicalActivities: -0.083187<br>
#     SmokerStatus: -0.077336<br>
#     AlcoholDrinkers: -0.074181<br>
#     RemovedTeeth: -0.073717<br>
#     DifficultyConcentrating: 0.051663<br>
#     LastCheckupTime: 0.065848<br>
#     BlindOrVisionDifficulty: 0.072964<br>
#     Sex: 0.073316<br>
#     DifficultyDressingBathing: 0.083090<br>
#     DifficultyErrands: 0.089495<br>
#     DeafOrHardOfHearing: 0.097662<br>
#     HadKidneyDisease: 0.109355<br>
#     HadArthritis: 0.117773<br>
#     PneumoVaxEver: 0.119955<br>
#     HadCOPD: 0.133223<br>
#     PhysicalHealthDays: 0.133420<br>
#     HadDiabetes: 0.135099<br>
#     DifficultyWalking: 0.159878<br>
#     ChestScan: 0.167760<br>
#     AgeCategory: 0.172172<br>
#     HadStroke: 0.177137<br>
#     HadAngina: 0.445903<br>
#     HadHeartAttack: 1.000000<br>
#     MentalHealthDays
#     WeightInKilograms
#     Total number of lines: 23
#     """

#     #Generate a df data frame with numerical columns and selected categorical columns
#     df = df[['PhysicalActivities', 'SmokerStatus', 'AlcoholDrinkers', 'RemovedTeeth',
#             'DifficultyConcentrating', 'LastCheckupTime', 'BlindOrVisionDifficulty', 'Sex',
#             'DifficultyDressingBathing', 'DifficultyErrands', 'DeafOrHardOfHearing',
#             'HadKidneyDisease', 'HadArthritis', 'PneumoVaxEver', 'HadCOPD',
#             'HadDiabetes', 'DifficultyWalking', 'ChestScan',
#             'AgeCategory', 'HadStroke', 'HadAngina', 'HadHeartAttack', 'GeneralHealth','PhysicalHealthDays', 'MentalHealthDays', 'SleepHours', 'WeightInKilograms', 'BMI']]
#     df.head()

#     #normalization the numerical columns
   
#     numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns
   
#     df[numerical_cols] = scaler.fit_transform(df[numerical_cols])
#     pickle.dump(scaler, open("scaler.sav", 'wb'))
#     df.head()

#     """To be able to create a function the testing the new dataset later, we will manually change the claases of the variable"""

#     # Exam the categorical variables
#     categorical_columns = df.select_dtypes(include=['object', 'category']).columns
  

#     """In this step we will exam and assign all the variable's classes manually"""

#     df['HadStroke'].unique()

#     df['ChestScan'].unique()

#     df['DifficultyWalking'].unique()

#     df['HadDiabetes'].unique()

#     df['HadDiabetes'] = df['HadDiabetes'].replace({
#         'No': 0,
#         'Yes': 1,
#         'Yes, but only during pregnancy (female)': 1,
#         'No, pre-diabetes or borderline diabetes': 0
#     })

#     df['HadCOPD'].unique()

#     df['PneumoVaxEver'].unique()

#     df['HadKidneyDisease'].unique()

#     df['DeafOrHardOfHearing'].unique()

#     df['DifficultyErrands'].unique()

#     df['DifficultyDressingBathing'].unique()

#     df['Sex'].unique()

#     df['Sex'] = df['Sex'].replace({
#         'Female': 0,
#         'Male': 1
#     })

#     df['BlindOrVisionDifficulty'].unique()

#     df['LastCheckupTime'].unique()

#     df['LastCheckupTime'] = df['LastCheckupTime'].replace({
#         'Within past year (anytime less than 12 months ago)': 0,
#         'Within past 2 years (1 year but less than 2 years ago)': 1,
#         'Within past 5 years (2 years but less than 5 years ago)': 2,
#         '5 or more years ago': 3
#     })

#     df['DifficultyConcentrating'].unique()

#     df['RemovedTeeth'].unique()

#     df['RemovedTeeth'] = df['RemovedTeeth'].replace({
#         'None of them': 0,
#         '1 to 5': 1,
#         '6 or more, but not all': 2,
#         'All': 3
#     })['RemovedTeeth'] = df['RemovedTeeth'].replace({
#         'None of them': 0,
#         '1 to 5': 1,
#         '6 or more, but not all': 2,
#         'All': 3
#     })

#     df['AlcoholDrinkers'].unique()

#     df['PhysicalActivities'].unique()

#     df['HadHeartAttack'].unique()

#     df['HadAngina'].unique()

#     df['HadArthritis'].unique()

#     df['HadAngina'] = df['HadAngina'].replace({'Yes': 1, 'No': 0})
#     df['HadArthritis'] = df['HadArthritis'].replace({'Yes': 1, 'No': 0})
#     df['HadHeartAttack'] = df['HadHeartAttack'].replace({'Yes': 1, 'No': 0})
#     df['PhysicalActivities'] = df['PhysicalActivities'].replace({'Yes': 1, 'No': 0})
#     df['AlcoholDrinkers'] = df['AlcoholDrinkers'].replace({'Yes': 1, 'No':0})
#     df['DifficultyConcentrating'] = df['DifficultyConcentrating'].replace({'Yes': 1, 'No':0})
#     df['BlindOrVisionDifficulty'] = df['BlindOrVisionDifficulty'].replace({'Yes': 1, 'No':0})
#     df['DifficultyDressingBathing'] = df['DifficultyDressingBathing'].replace({'Yes': 1, 'No':0})
#     df['DifficultyErrands'] = df['DifficultyErrands'].replace({'Yes': 1, 'No':0})
#     df['DeafOrHardOfHearing'] = df['DeafOrHardOfHearing'].replace({'Yes': 1, 'No':0})
#     df['HadKidneyDisease'] = df['HadKidneyDisease'].replace({'Yes': 1, 'No':0})
#     df['PneumoVaxEver'] = df['PneumoVaxEver'].replace({'Yes': 1, 'No':0})
#     df['HadCOPD'] = df['HadCOPD'].replace({'Yes': 1, 'No':0})
#     df['DifficultyWalking'] = df['DifficultyWalking'].replace({'Yes': 1, 'No':0})
#     df['ChestScan'] = df['ChestScan'].replace({'Yes': 1, 'No':0})
#     df['HadStroke'] = df['HadStroke'].replace({'Yes': 1, 'No':0})

#     df['SmokerStatus'].unique()

#     df.replace({'SmokerStatus': {'Former smoker': 1,
#                                 'Never smoked': 0,
#                                 'Current smoker - now smokes every day': 3,
#                                 'Current smoker - now smokes some days': 2}}, inplace=True)

#     df['GeneralHealth'].unique()

#     df.replace({'GeneralHealth': {'Very good': 3,
#                                 'Excellent': 4,
#                                 'Good': 2,
#                                 'Fair': 1,
#                                 'Poor': 0}}, inplace=True)

#     df['AgeCategory'].unique()

#     df.replace({'AgeCategory': {'Age 18 to 24': 0,
#                                 'Age 25 to 29': 1,
#                                 'Age 30 to 34': 2,
#                                 'Age 35 to 39': 3,
#                                 'Age 40 to 44': 4,
#                                 'Age 45 to 49': 5,
#                                 'Age 50 to 54': 6,
#                                 'Age 55 to 59': 7,
#                                 'Age 60 to 64': 8,
#                                 'Age 65 to 69': 9,
#                                 'Age 70 to 74': 10,
#                                 'Age 75 to 79': 11,
#                                 'Age 80 or older': 12}}, inplace=True)

#     df.head()

#     # Create X and y for train_test_split
#     X = df.drop(['HadHeartAttack'], axis = 1)
#     y = df['HadHeartAttack']

#     # The data is very imbalanced
#     y.value_counts()

#     # Use a pie chart to examine the distribution
  
#     class_counts = y.value_counts()
#    #plt.figure(figsize=(8, 6))
#     #plt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%', startangle=140)
#     #plt.title('Distribution of Classes')
#     #plt.axis('equal')
#     #plt.show()

#     """Peform under sampling"""

#     #We use RandomUnderSampler to balance the dataset. In this, we see the data has been balanced


#     rus = RandomUnderSampler(sampling_strategy=1)
#     X_res, y_res = rus.fit_resample(X, y)
#     ax = y_res.value_counts().plot.pie(autopct='%.2f')
#     _ = ax.set_title("Under-sampling")

#     #exam the imbalanced y
#     y.value_counts()

#     # exam the imbalanced y_res
#     y_res.value_counts()

#     # model training
  

#     X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)
    
#     log_reg.fit(X_train, y_train)
#     pickle.dump(log_reg, open("log_model.sav", 'wb'))
   
#     X_train.columns

# create a function for probability prediction
log_reg = None
scaler = None
def predict_probabilities(new_data):
    global log_reg
    global scaler
    if log_reg == None: # type: ignore
        log_reg = pickle.load(open("log_model.sav", 'rb'))
    if scaler == None: # type: ignore
        scaler = pickle.load(open("scaler.sav", 'rb'))
    numerical_cols = ['PhysicalHealthDays', 'MentalHealthDays', 'SleepHours', 'WeightInKilograms', 'BMI']
    new_data[numerical_cols] = scaler.transform(new_data[numerical_cols])
    probabilities = log_reg.predict_proba(new_data)[:, 1]
    probabilities_rounded = [round(prob, 2) for prob in probabilities]
    return probabilities_rounded

# Create a sample data for prediction
new_data_sample = pd.DataFrame({
    'PhysicalActivities': [1, 0],
    'SmokerStatus': [0, 1],
    'AlcoholDrinkers': [1, 1],
    'RemovedTeeth': [0, 0],
    'DifficultyConcentrating': [0, 1],
    'LastCheckupTime': [1, 0],
    'BlindOrVisionDifficulty': [0, 1],
    'Sex': [0, 1],
    'DifficultyDressingBathing': [0, 1],
    'DifficultyErrands': [0, 1],
    'DeafOrHardOfHearing': [1, 0],
    'HadKidneyDisease': [0, 1],
    'HadArthritis': [1, 0],
    'PneumoVaxEver': [1, 0],
    'HadCOPD': [0, 1],
    'HadDiabetes': [1, 0],
    'DifficultyWalking': [2, 1],
    'ChestScan': [0, 1],
    'AgeCategory': [5, 8],
    'HadStroke': [0, 1],
    'HadAngina': [1, 0],
    'GeneralHealth': [2, 3],
    'PhysicalHealthDays': [5, 4],
    'MentalHealthDays': [1, 2],
    'SleepHours': [7, 6],
    'WeightInKilograms': [70.0, 85.0],
    'BMI': [22.0, 27.5]
})

'''
print("The percentage of having a heart attack is: ", predict_probabilities(new_data_sample, log_reg, scaler))

"""**PhysicalActivities:** <br>
Whether the individual engages in physical activities. Encoded as 0 (No) or 1 (Yes).<br>
**SmokerStatus:**<br> The smoking status of the individual. Encoded as 0 (Never smoked), 1 (Former smoker), 2 (Current smoker - now smokes some days), 3 (Current smoker - now smokes every day).<br>
**AlcoholDrinkers:**<br> Whether the individual consumes alcohol. Encoded as 0 (No) or 1 (Yes).<br>
**RemovedTeeth:**<br> The status of teeth removal. Encoded differently, possibly indicating the number or condition of teeth removed.<br>
**DifficultyConcentrating:**<br> Whether the individual has difficulty concentrating. Encoded as 0 (No) or 1 (Yes).<br>
**LastCheckupTime:**<br> Indicates the last time the individual had a medical checkup. Encoded numerically to represent different time frames.<br>
**BlindOrVisionDifficulty:**<br> Whether the individual has blindness or difficulty seeing. Encoded as 0 (No) or 1 (Yes).<br>
**Sex:**<br> The sex of the individual. Typically encoded as 0 (Female) or 1 (Male).<br>
**DifficultyDressingBathing:**<br> Whether the individual has difficulty dressing or bathing. Encoded as 0 (No) or 1 (Yes).<br>
**DifficultyErrands:**<br> Whether the individual has difficulty running errands alone. Encoded as 0 (No) or 1 (Yes).<br>
**DeafOrHardOfHearing:**<br> Whether the individual is deaf or has difficulty hearing. Encoded as 0 (No) or 1 (Yes).<br>
**HadKidneyDisease:**<br> Whether the individual has had kidney disease. Encoded as 0 (No) or 1 (Yes).<br>
**HadArthritis:**<br> Whether the individual has arthritis. Encoded as 0 (No) or 1 (Yes).<br>
**PneumoVaxEver:**<br> Whether the individual has ever received a pneumococcal vaccine. Encoded as 0 (No) or 1 (Yes).<br>
**HadCOPD:**<br> Whether the individual has COPD (Chronic Obstructive Pulmonary Disease). Encoded as 0 (No) or 1 (Yes).<br>
**HadDiabetes:**<br> Whether the individual has diabetes. Encoded as 0 (No) or 1 (Yes).<br>
**DifficultyWalking:**<br> Whether the individual has difficulty walking. Encoded as 0 (No) or 1 (Yes).<br>
**ChestScan:**<br> Whether the individual has undergone a chest scan. Encoded as 0 (No) or 1 (Yes).<br>
**AgeCategory:**<br>The age category of the individual. Encoded numerically to represent different age ranges.<br>
**HadStroke:** <br>Whether the individual has had a stroke. Encoded as 0 (No) or 1 (Yes).<br>
**HadAngina:** <br>Whether the individual has had angina. Encoded as 0 (No) or 1 (Yes).<br>
**GeneralHealth:** <br>The general health condition of the individual. Encoded as 0 (Poor), 1 (Fair), 2 (Good), 3 (Very good), 4 (Excellent).<br>
**PhysicalHealthDays:** <br>The number of days in poor physical health in the last month. Encoded numerically.<br>
**MentalHealthDays:** <br>The number of days in poor mental health in the last month. Encoded numerically.<br>
**SleepHours:** <br>The average number of hours the individual sleeps. Encoded numerically.<br>
**WeightInKilograms:** <br>The weight of the individual in kilograms. Encoded numerically.<br>
**BMI:** <br>The Body Mass Index of the individual. Encoded numerically.<br>
"""


'''

